(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Sample latch circuit (ST-Microelectronics)
 *
 * Description     : Sample latch circuit
 * Correctness     : ?
 * Source          : Rémy Chevallier; Times by Patricia Renault (LIP6)
 * Author          : Étienne André et al. (ANR VALMEM project)
 * Modeling        : Étienne André
 * Input by        : Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2007/12
 * Last modified   : 2020/08/18
 *
 * IMITATOR version: 3.0
 ************************************************************)
 
var
	s, ckClock, ckD, ckNot1, ckNot2, ckXor, ckAnd, ckLatch
		: clock;

	tNot1Down1,
	tNot2Up1,
	tXorUp1, tXorDown1,
	tAndUp1, tAndDown1,
	tLatchUp1,
	q
		: discrete;

	dClockHigh, dClockLow,
	dSetup, dHold,
	dNot1Down_l, dNot1Down_u, dNot1Up_l, dNot1Up_u,
	dNot2Down_l, dNot2Down_u, dNot2Up_l, dNot2Up_u,
	dXorDown1Up_l, dXorDown1Up_u, dXorUp2Up_l, dXorUp2Up_u,
(*  	dAndUp1_l, dAndUp1_u, *)
	dAndUp2_l, dAndUp2_u, dAndDown1_l, dAndDown1_u,
(*  	dAndDown2_l, dAndDown2_u, *)
	dLatchUp_l, dLatchUp_u
			: parameter;
	
(************************************************************)
automaton clock1
(************************************************************)
synclabs: clockUp1;

loc ClockLow1: invariant ckClock <= dClockLow
	when ckClock >= dClockLow sync clockUp1 do {ckClock := 0} goto ClockHigh1;

loc ClockHigh1: invariant ckClock <= dClockHigh
	when True do {} goto ClockHigh1;
end (*clock1*)


(************************************************************)
automaton d1
(************************************************************)
synclabs: clockUp1, dUp1, dDown1;

loc DLow1: invariant ckD<=dClockLow-dSetup
		when ckD=dClockLow-dSetup sync dUp1 do {ckD := 0} goto DHigh1;

loc DHigh1: invariant ckD<=dSetup
	when ckD=dSetup sync clockUp1 do {ckD := 0} goto DHigh2;

loc DHigh2: invariant ckD<=dHold
	when ckD=dHold sync dDown1 do {} goto DLow2;

loc DLow2: invariant ckD >= 0
	when True do {} goto DLow2;

end (*d1*)


(************************************************************)
automaton not1
(************************************************************)
synclabs: clockUp1,
	not1Down1;

loc Not1High1: invariant ckNot1 >= 0
	when True sync clockUp1 do {ckNot1 := 0} goto Not1High1bis;

loc Not1High1bis: invariant ckNot1 <= dNot1Down_u
	when ckNot1 >= dNot1Down_l sync not1Down1 do {tNot1Down1 := s} goto Not1Low1;

loc Not1Low1: invariant ckNot1 >= 0
	when True do {} goto Not1Low1;
end (*not1*)


(************************************************************)
automaton not2
(************************************************************)
synclabs: not1Down1,
	not2Up1;

loc Not2Low1: invariant ckNot2 >= 0
	when True sync not1Down1 do {ckNot2 := 0} goto Not2Low1bis;

loc Not2Low1bis: invariant ckNot2 <= dNot2Up_u
	when ckNot2 >= dNot2Up_l sync not2Up1 do {tNot2Up1 := s} goto Not2High1;

loc Not2High1: invariant ckNot2 >= 0
	when True do {} goto Not2High1;
end (*not2*)


(************************************************************)
automaton xor1
(************************************************************)
synclabs: clockUp1, not2Up1,
	xorUp1, xorDown1;

loc XorLow1: invariant ckXor >= 0
	when True sync clockUp1 do {ckXor := 0} goto XorLow1bis;

loc XorLow1bis: invariant ckXor <= dXorUp2Up_u
	when ckXor >= dXorUp2Up_l sync xorUp1 do {tXorUp1 := s} goto XorHigh1;

loc XorHigh1: invariant ckXor >= 0
	when True sync not2Up1 do {ckXor := 0} goto XorHigh1bis;

loc XorHigh1bis: invariant ckXor <= dXorDown1Up_u
	when ckXor >= dXorDown1Up_l sync xorDown1 do {tXorDown1 := s} goto XorLow2;

loc XorLow2: invariant ckXor >= 0
	when True do {} goto XorLow2;
end (*xor1*)


(************************************************************)
automaton and1
(************************************************************)
synclabs: clockUp1, xorDown1,
	andUp1, andDown1;

loc AndLow1: invariant ckAnd >= 0
	when True sync clockUp1 do {ckAnd := 0} goto AndLow1bis;

loc AndLow1bis: invariant ckAnd <= dAndUp2_u
	when ckAnd >= dAndUp2_l sync andUp1 do {tAndUp1 := s} goto AndHigh1;

loc AndHigh1: invariant ckAnd >= 0
	when True sync xorDown1 do {ckAnd := 0} goto AndHigh1bis;

loc AndHigh1bis: invariant ckAnd <= dAndDown1_u
	when ckAnd >= dAndDown1_l sync andDown1 do {tAndDown1 := s} goto AndLow2;

loc AndLow2: invariant ckAnd >= 0
	when True do {} goto AndLow2;
end (*and1*)


(************************************************************)
automaton latch1
(************************************************************)
synclabs: dUp1, dDown1, andUp1, andDown1,
	latchUp1;

loc LatchD0E0: invariant ckLatch >= 0
	when True sync dUp1 do {} goto LatchD1E0;
	when True sync andUp1 do {ckLatch := 0} goto LatchD0E1;

loc LatchD0E1: invariant ckLatch >= 0 (*simplification : Q can not go down in our case*)
	when True sync dUp1 do {ckLatch := 0} goto LatchD1E1;
	when True sync andDown1 do {} goto LatchD0E0;

loc LatchD1E0: invariant ckLatch >= 0
	when True sync andUp1 do {ckLatch := 0} goto LatchD1E1;
	when True sync dDown1 do {} goto LatchD0E0;

loc LatchD1E1: invariant ckLatch <= dLatchUp_u
	when ckLatch >= dLatchUp_l sync latchUp1 do {tLatchUp1 := s, q'=1} 
			goto LatchD1E1B;
	when True sync dDown1 do {} goto LatchD0E1;
	when True sync andDown1 do {} goto LatchD1E0;

loc LatchD1E1B: invariant ckLatch >= 0
	when True sync andDown1 do {} goto LatchD1E0;
	when True sync dDown1 do {} goto LatchD0E1;
end (*latch1*)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	  loc[clock1] = ClockLow1
	& loc[d1] = DLow1
	& loc[not1] = Not1High1
	& loc[not2] = Not2Low1
	& loc[xor1] = XorLow1
	& loc[and1] = AndLow1 
	& loc[latch1] = LatchD0E0

	(*------------------------------------------------------------*)
	(* Initial discrete assignments *)
	(*------------------------------------------------------------*)
	& q=2
	
	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& s = 0
	& ckClock = 0
	& ckD = 0
	& ckNot1 = 0
	& ckNot2 = 0
	& ckXor = 0
	& ckAnd = 0
	& ckLatch = 0


	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
(*--	& dLatchUp_l>0
--	& dAndUp2_l >0
--	& dNot2Down_l>0
--	& dNot1Up_l>0
--	& dNot1Down_l>0
--	& dXorDown1Up_l>0
--	& dAndDown1_l>0
--	& dSetup>0*)

	& dNot1Down_u = dNot1Down_l
	& dNot1Up_u = dNot1Up_l
	& dNot2Down_u = dNot2Down_l
	& dNot2Up_u = dNot2Up_l
	& dXorUp2Up_u = dXorUp2Up_l
	& dXorDown1Up_u = dXorDown1Up_l
	& dAndUp2_u = dAndUp2_l
	& dAndDown1_u = dAndDown1_l
	& dLatchUp_u = dLatchUp_l

	& dAndDown1_l>0

(*	----------------------
	-- Constraint output by IMITATOR 1
	----------------------
--       & dHold < dXorDown1Up_l + dNot2Up_l + dXorUp2Up_l
--       & 0 <= dNot2Up_l
--       & dXorUp2Up_l = dNot1Down_l
--       & 0 <= dAndUp2_l
--       & dLatchUp_l + dAndUp2_l < dHold
--       & dAndUp2_l < dXorUp2Up_l
--       & dXorUp2Up_l + dXorDown1Up_l + dAndDown1_l + dNot2Up_l <= dClockHigh
--       & 0 <= dSetup
--       & dSetup < dClockLow
--       & 0 < dAndDown1_l
--       & dXorUp2Up_l + dNot2Up_l < dLatchUp_l + dAndUp2_l*)

	(*------------------------------------------------------------*)
	(* Resulting times and durations (in ps) *)
	(*------------------------------------------------------------*)
	& tNot1Down1 = 0

	& tNot2Up1 = 0

	& tXorUp1 = 0
	& tXorDown1 = 0

	& tAndUp1 = 0
	& tAndDown1 = 0

	& tLatchUp1 = 0
	
	

;


(************************************************************)
(* The end *)
(************************************************************)
end
