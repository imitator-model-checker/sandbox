(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Toy model to exhibit differences between BC and PRPC (in 2 dimensions)
 *
 * Description     : Toy model to exhibit differences between BC and PRPC (in 2 dimensions)
 * Correctness     : lbad unreachable
 * Source          : Own work
 * Author          : Étienne André
 * Modeling        : Étienne André
 * Input by        : Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2016/08/16
 * Last modified   : 2016/08/16
 *
 * IMITATOR version: 2.8
 ************************************************************)

var

(* Clocks *)
 	x, y
		: clock;

(* Parameters *)
	p1, p2
		: parameter;



(************************************************************)
  automaton pta
(************************************************************)
synclabs: ;

loc l1: while True wait {}

	when True do {x' = 0} goto l2;
	when True do {y' = 0} goto l2;
	
	(* p1 in [0, 2) , p2 in [0, 2) *)
	when x = 0 & x <= p1 & p1 < y & y = 2 & x <= p2 & p2 < y do {y' = 0} goto l3;

	(* p1 >= 2 *)
	when p1 >= x & x = 2 & y = 1 do {x' = 0} goto lbad;

loc l2: while True wait {}
	(* This loops allows to desynchronize both clocks *)
	when True goto l1;
	(* p2 >= 2 *)
	when p2 >= x & x = 2 goto lbad;

loc l3: while True wait {}
	(* This loops allows to desynchronize both clocks *)
	when True do {x' = 0} goto l3;

	(* p1 in [0, 1) , p2 in [0, 1) *)
	when x = 0 & x <= p1 & p1 < y & y = 1 & x <= p2 & p2 < y goto l4;
	(* p1 in [1, 2) , p2 in [0, 1) *)
	when x = 0 & x+1 <= p1 & p1 < y+1 & y = 1 & x <= p2 & p2 < y goto l5;
	(* p1 in [1, 2) , p2 in [1, 2) *)
	when x = 1 & x <= p1 & p1 < y & y = 2 & x <= p2 & p2 < y goto l6;

loc l4: while True wait {}

loc l5: while True wait {}

loc l6: while True wait {}

loc lbad: while True wait {}
	(* p1 in [2, 3) , p2 in [0, 1) *)
	when x = 0 & x+2 <= p1 & p1 < y+2 & y = 1 & x <= p2 & p2 < y goto l7;
	(* p1 in [3, 4] , p2 in [0, 1) *)
	when x = 0 & x+3 <= p1 & p1 <= y+4 & y = 1 & x <= p2 & p2 < y goto l8;
	(* p1 in [2, 3) , p2 in [1, 2) *)
	when x = 1 & x+1 <= p1 & p1 < y+1 & y = 2 & x <= p2 & p2 < y goto l9;
	(* p1 in [3, 4] , p2 in [1, 2) *)
	when x = 1 & x+2 <= p1 & p1 <= y+2 & y = 2 & x <= p2 & p2 < y goto l10;

loc l7: while True wait {}

loc l8: while True wait {}

loc l9: while True wait {}

loc l10: while True wait {}

end (* pta *)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[pta] = l1

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x = 0
	& y = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& 0 <= p1 & p1 <= 4
	& 0 <= p2 & p2 <= 4
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[pta] = lbad;


(************************************************************)
(* The end *)
(************************************************************)
end
