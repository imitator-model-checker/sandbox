(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Empty template of a case study
 *
 * Description     : Sample PTA to test PRP
 * Correctness     : locBad1 and locBad2 unreachable
 * Source          : Own work
 * Author          : Étienne André
 * Modeling        : Étienne André
 * Input by        : Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)

 *
 * Created         : 2016/01/15
 * Last modified   : 2016/01/15
 *
 * IMITATOR version: 2.7.4-working
 ************************************************************)

var

(* Clocks *)
 	x, y
		: clock;

(* Parameters *)
	p1, p2
		: parameter;



(************************************************************)
  automaton pta
(************************************************************)
(* synclabs: a; *)

loc l1: while True wait {}
	when True goto l2;
	(* p2 >= 4 *)
	when x >= 4 & y = p2 do {x' = 0, y' = 0} goto locBad1;
	(* p2 >= 5 *)
	when x >= 5 & y = p2 do {x' = 0, y' = 0} goto infiniteLoop;

loc l2: while True wait {}
	(* p2 <= 1 *)
	when x <= 1 & y = p2 do {x' = 0, y' = 0} goto l3;
	(* p1 >= p2 *)
	when p1 >= x & y >= p2 do {x' = 0, y' = 0} goto l4;
	(* p1 >= 3 *)
	when x >= 3 & y = p1 do {x' = 0, y' = 0} goto locBad2;

(* Good infinite loop location *)
loc l3: while x <= p1 wait {}
	when x = p1 do {x' = 0, y' = 0} goto l3;

(* Good deadlock location *)
loc l4: while True wait {}

loc locBad1: while True wait {}

loc locBad2: while True wait {}
	(* Go to infinite loop, but PRP shall not go there *)
	when True do {x' = 0, y' = 0} goto infiniteLoop;

(* Simulate an infinite loop for IMITATOR (with some extrapolation, this loop could terminate, but then we could use another PTA gadget to simulate an infinite loop) *)
loc infiniteLoop: while x <= 1 wait {}
	when x = 1 do {x' = 0} goto infiniteLoop;

end (* pta *)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[pta] = l1

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x = 0
	& y = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& p1 >= 0
	& p2 >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[pta] = locBad1 or loc[pta] = locBad2;


(************************************************************)
(* The end *)
(************************************************************)
end
