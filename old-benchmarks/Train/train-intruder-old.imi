(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Train gate controller with intruder
 *
 * Description     : Train crossing, with an intruder that may weaken the safety. OLD VERSION THAT DOES NOT WORK SO WELL.
 * Correctness     : When the train passes, the gate is closed
 * Source          : Étienne André, Michał Knapik
 * Author          : Étienne André, Michał Knapik
 * Input by        : Étienne André
 *
 * Created         : 2015/06/30
 * Last modified   : 2015/09/24
 *
 * IMITATOR version: 2.7.2-working
 ************************************************************)


var

(* Clocks *)
 	x_train, x_gate, x_intruder
		: clock;

(* Discrete *)
	gate_down,
	sensors_active,
		: discrete;

(* Train parameters *)
	p_approaching_min = 40, p_approaching_max = 60,
	p_coming_min = 10, p_coming_max = 15,
	p_stopping_min = 8, p_stopping_max = 9,
	
(* Gate parameters *)
	p_waiting_min = 25, p_waiting_max = 40,
	p_ewaiting_min = 5, p_ewaiting_max = 10,
	p_lowering_min = 15, p_lowering_max = 20,
(* 	p_elowering_min = 5, p_elowering_max = 8, *)

(* Intruder parameters *)
(*	p_walking_sensor_min = 80, p_walking_sensor_max = 100,
	p_walking_house_min = 10, p_walking_house_max = 15,
	p_enter_min = 50, p_enter_max = 60,*)
	p_walking_sensor_min, p_walking_sensor_max,
	p_walking_house_min, p_walking_house_max,
	p_enter_min, p_enter_max,
		: parameter;

(* Constants *)
	FALSE = 0,
	TRUE = 1,
		: constant;


(************************************************************)
  automaton train
(************************************************************)
synclabs: sensor_far, sensor_close, emergency_stop, pass;

loc far: while True wait {}
	when True sync sensor_far do {x_train' = 0} goto approaching;

loc approaching: while x_train <= p_approaching_max wait {}
	(* Normal situation *)
	when x_train >= p_approaching_min & gate_down = TRUE sync sensor_close do {x_train' = 0} goto veryclose;
	(* Gate not closed detected! *)
	when x_train >= p_approaching_min & gate_down = FALSE & sensors_active = TRUE sync sensor_close do {x_train' = 0} goto stopping;
	(* Gate not closed NOT detected due to power cut! *)
	when x_train >= p_approaching_min & gate_down = FALSE & sensors_active = FALSE sync sensor_close do {x_train' = 0} goto veryclose;
	
loc veryclose: while x_train <= p_coming_max wait {}
	when x_train >= p_coming_min & gate_down = TRUE sync pass do {x_train' = 0} goto gone;
	when x_train >= p_coming_min & gate_down = FALSE sync pass do {x_train' = 0} goto crash;

loc stopping: while x_train <= p_stopping_max wait {}
	when x_train >= p_stopping_min sync emergency_stop do {x_train' = 0} goto stopped;

(** HACK: stop time to reduce state space *)
loc stopped: while x_train <= 0 wait {}

(** HACK: stop time to reduce state space *)
loc gone: while x_train <= 0 wait {}

(** HACK: stop time to reduce state space *)
loc crash: while x_train <= 0 wait {}


end (* train *)


(************************************************************)
  automaton gate
(************************************************************)
synclabs: power_cut, sensor_far, start_lowering, end_lowering;

loc up: while True wait {}
	when True sync sensor_far do {x_gate' = 0} goto waiting;
	when True sync power_cut do {x_gate' = 0} goto waiting_cut;

loc waiting: while x_gate <= p_waiting_max wait {}
	when x_gate >= p_waiting_min sync start_lowering do {x_gate' = 0} goto lowering;
	when True sync power_cut do {x_gate' = 0} goto waiting_cut;

loc waiting_cut: while x_gate <= p_ewaiting_max wait {}
	when x_gate >= p_ewaiting_min sync start_lowering do {x_gate' = 0} goto lowering;

loc lowering: while x_gate <= p_lowering_max wait {}
	when x_gate >= p_lowering_min sync end_lowering do {x_gate' = 0, gate_down' = TRUE} goto down;
	when True sync power_cut goto lowering; (* no influce of power cut when the gate is lowering *)

(* emergency (fast) mode for lowering the gate *)
(*loc elowering: while x_gate <= p_elowering_max wait {}
	when x_gate >= p_elowering_min sync end_lowering do {x_gate' = 0, gate_down' = TRUE} goto down;
	when True sync power_cut goto elowering; (* no influce of power cut when the gate is lowering *)*)

loc down: while True wait {}
	when True sync power_cut goto lowering; (* no influce of power cut when the gate is down *)

end (* gate *)


(************************************************************)
  automaton intruder
(************************************************************)
synclabs: power_cut, sensor_far, walking_towards_sensor, walking_towards_house, break_sensor, reach_house;

loc idle: while True wait {}
	when True sync sensor_far goto choosing;

loc choosing: while True wait {}
	when True sync walking_towards_sensor do {x_intruder' = 0} goto walking_sensor;
	when True sync walking_towards_house do {x_intruder' = 0} goto walking_house;

loc walking_sensor: while x_intruder <= p_walking_sensor_max wait {}
	when x_intruder >= p_walking_sensor_min sync break_sensor do {sensors_active' = FALSE, x_intruder' = 0} goto intruder_done;

loc walking_house: while x_intruder <= p_walking_house_max wait {}
	when x_intruder >= p_walking_house_min sync reach_house do {x_intruder' = 0} goto enter_house;

loc enter_house: while x_intruder <= p_enter_max wait {}
	when x_intruder >= p_enter_min sync power_cut do {sensors_active' = FALSE, x_intruder' = 0} goto intruder_done;

loc intruder_done: while True wait {}

end (* intruder *)


(************************************************************)
(* Initial state *)
(************************************************************)

init := True
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[train] = far
	& loc[gate] = up
	& loc[intruder] = idle

	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& x_train = 0
	& x_gate = 0
	& x_intruder = 0

	(*------------------------------------------------------------
	   INITIAL DISCRETE
	  ------------------------------------------------------------*)
	& gate_down = FALSE
	& sensors_active = TRUE

	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
	(* Train *)
	& p_approaching_min >= 0
	& p_approaching_min <= p_approaching_max
	& p_coming_min >= 0
	& p_coming_min <= p_coming_max
	& p_stopping_min >= 0
	& p_stopping_min <= p_stopping_max
	(* Gate *)
	& p_waiting_min >= 0
	& p_waiting_min <= p_waiting_max
	& p_lowering_min >= 0
	& p_lowering_min <= p_lowering_max
	& p_ewaiting_min >= 0
	& p_ewaiting_min <= p_ewaiting_max
(*	& p_elowering_min >= 0
	& p_elowering_min <= p_elowering_max*)
	(* Intruder *)
	& p_walking_sensor_min >= 0
	& p_walking_sensor_min <= p_walking_sensor_max
	& p_walking_house_min >= 0
	& p_walking_house_min <= p_walking_house_max
	& p_enter_min >= 0
	& p_enter_min <= p_enter_max
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[train] = crash;


(************************************************************)
(* The end *)
(************************************************************)
end
