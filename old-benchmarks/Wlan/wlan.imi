--****************************************************--
--****************************************************--
-- WLAN PROTOCOL (two stations)
-- discrete time model
-- gxn/jzs 20/02/02
--
--                                Created : < 2010/05/03
--                          Last modified : 2013/04/19
--                       IMITATOR version : 2.6.0
--****************************************************--
--****************************************************--



	-- clock for station 1,2
	
var     x1, x2            
           : clock;

-- TIMING CONSTRAINTS

	ASLOTTIME, --= 1;
	DIFS, --= 3; -- due to scaling can be non-deterministically either 2 or 3
	VULN, --= 1; -- due to scaling can be non-deterministically either 0 or 1
	TRANS_TIME_MAX, --= 315; -- scaling up
	TRANS_TIME_MIN, --= 4; -- scaling down
	ACK_TO, --= 6; 
	ACK, --= 4; -- due to scaling can be non-deterministically either 3 or 4
	SIFS, --= 1; -- due to scaling can be non-deterministically either 0 or 1
	-- TIME_MAX, --= 315; -- maximum constant used in timing constraints + 1
	BOFF = 6 (*max backoff (since contention window is [15,1023])*)
	: parameter;

	col, -- : [0..8]; -- number of collisions
			-- medium status 
	c1, -- : [0..2];
	c2,  --: [0..2];
		-- ci corresponds to messages associated with station i
		-- 0 nothing being sent
		-- 1 being sent correctly
		-- 2 being sent garbled	  

	slot1, slot2, -- : [0..63]; 
	backoff1, backoff2, --: [0..15];

	bc1, bc2 -- : [0..BOFF];
           : discrete;


--****************************************************--
--****************************************************--
-- AUTOMATA
--****************************************************--
--****************************************************--


--****************************************************--
automaton medium
--****************************************************--
	
synclabs: send1, send2, finish1, finish2;
	
initially Idle;

loc Idle: while True wait {}

	-- begin sending message and nothing else currently being sent
	-- [send1] c1=0 & c2=0 -> (c1'=1);
	when c1=0 & c2=0 sync send1 do {c1'=1} goto Idle;
	-- [send2] c2=0 & c1=0 -> (c2'=1);
	when c1=0 & c2=0 sync send2 do {c2'=1} goto Idle;

	-- begin sending message and  something is already being sent
	-- in this case both messages become garbled
	-- [send1] c1=0 & c2>0 -> (c1'=2) & (c2'=2) & col'=min(col+1,8);
	when c1=0 & c2>0 & col<8 sync send1 do {c1'=2,c2'=2,col'=col+1}
				goto Idle;
	when c1=0 & c2>0 & col=8 sync send1 do {c1'=2,c2'=2}
				goto Idle;
	-- [send2] c2=0 & c1>0 -> (c1'=2) & (c2'=2) & col'=min(col+1,8);
	when c1>0 & c2=0 & col<8 sync send1 do {c1'=2,c2'=2,col'=col+1}
				goto Idle;
	when c1>0 & c2=0 & col=8 sync send1 do {c1'=2,c2'=2}
				goto Idle;

	-- finish sending message
	-- [finish1] c1>0 -> (c1'=0);
	when c1>0 sync finish1 do {c1'=0} goto Idle;
	-- [finish2] c2>0 -> (c2'=0);
	when c2>0 sync finish2 do {c2'=0} goto Idle;

end -- medium



--****************************************************--
automaton station1
--****************************************************--
synclabs: send1, finish1;

initially s1_1;


	
	-- local state
--	s1 : [1..12];
	-- 1 sense
	-- 2 wait until free before setting backoff
	-- 3 wait for DIFS then set slot
	-- 4 set backoff 
	-- 5 backoff
	-- 6 wait until free in backoff
	-- 7 wait for DIFS then resume backoff
	-- 8 vulnerable 
	-- 9 transmit
	-- 11 wait for SIFS and then ACK
	-- 10 wait for ACT_TO 
	-- 12 done

	-- SENSE
loc s1_1: while x1 <= DIFS wait {}

	-- let time pass
--	[time] s1=1 & x1<DIFS & free -> (x1'=min(x1+1,TIME_MAX));
	-- ready to transmit
--	[] s1=1 & (x1=DIFS | x1=DIFS-1) -> (s1'=8) & (x1'=0);
	when x1=DIFS do {x1'=0} goto s1_8;

	-- found channel busy so wait until free
--	[] s1=1 & busy -> (s1'=2) & (x1'=0);

	when c1>0 do {x1'=0} goto s1_2;
	when c2>0 do {x1'=0} goto s1_2;

loc s1_2: while x1 >=0 wait {}
	-- WAIT UNTIL FREE BEFORE SETTING BACKOFF
	-- let time pass (no need for the clock x1 to change)
--	[time] s1=2 & busy -> (s1'=2);
--	when True c1>0  goto s2;
--	when True c2>0  goto s2;

	-- find that channel is free so check its free for DIFS before setting backoff
--	[] s1=2 & free -> (s1'=3);
	when c1=0 & c2=0 goto s1_3;


loc s1_3: while x1 <= DIFS wait {}

	-- WAIT FOR DIFS THEN SET BACKOFF
	-- let time pass
--	[time] s1=3 & x1<DIFS & free -> (x1'=min(x1+1,TIME_MAX));
	-- found channel busy so wait until free
--	[] s1=3 & busy -> (s1'=2) & (x1'=0);
	when c1>0 do {x1'=0} goto s1_2;
	when c2>0 do {x1'=0} goto s1_2;

	-- start backoff  first uniformly choose slot
	-- backoff counter 0
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=0 ->
--		   (s1'=4) & (x1'=0) & (slot1'=0) & (bc1'=min(bc1+1,BOFF));
	when x1=DIFS & bc1< BOFF & bc1=0 
			do {x1'=0,slot1'=0, bc1'=bc1+1} goto s1_4;
	when x1=DIFS & bc1=BOFF & bc1=0 
			do {x1'=0,slot1'=0} goto s1_4;

	-- backoff counter 1
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=1 ->
--		   1/2 : (s1'=4) & (x1'=0) & (slot1'=0) & (bc1'=min(bc1+1,BOFF))
--		+ 1/2 : (s1'=4) & (x1'=0) & (slot1'=1) & (bc1'=min(bc1+1,BOFF));
	when bc1=1 & bc1<BOFF do {x1'=0, slot1'=0, bc1'=bc1+1} goto s1_4;
	when bc1=1 & bc1=BOFF do {x1'=0, slot1'=0} goto s1_4;


	-- backoff counter 2
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=2 ->
--		   1/4 : (s1'=4) & (x1'=0) & (slot1'=0) & (bc1'=min(bc1+1,BOFF))
--		+ 1/4 : (s1'=4) & (x1'=0) & (slot1'=1) & (bc1'=min(bc1+1,BOFF))
--		+ 1/4 : (s1'=4) & (x1'=0) & (slot1'=2) & (bc1'=min(bc1+1,BOFF))
--		+ 1/4 : (s1'=4) & (x1'=0) & (slot1'=3) & (bc1'=min(bc1+1,BOFF));

	when bc1=2 & bc1<BOFF do {x1'=0, slot1'=0, bc1'=bc1+1} goto s1_4;
	when bc1=2 & bc1<BOFF do {x1'=0, slot1'=1, bc1'=bc1+1} goto s1_4;
	when bc1=2 & bc1<BOFF do {x1'=0, slot1'=2, bc1'=bc1+1} goto s1_4;
	when bc1=2 & bc1<BOFF do {x1'=0, slot1'=3, bc1'=bc1+1} goto s1_4;
	when bc1=2 & bc1=BOFF do {x1'=0, slot1'=0} goto s1_4;
	when bc1=2 & bc1=BOFF do {x1'=0, slot1'=1} goto s1_4;
	when bc1=2 & bc1=BOFF do {x1'=0, slot1'=2} goto s1_4;
	when bc1=2 & bc1=BOFF do {x1'=0, slot1'=3} goto s1_4;


	-- backoff counter 3
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=3 ->
--		   1/8 : (s1'=4) & (x1'=0) & (slot1'=0) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=1) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=2) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=3) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=4) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=5) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=6) & (bc1'=min(bc1+1,BOFF))
--		+ 1/8 : (s1'=4) & (x1'=0) & (slot1'=7) & (bc1'=min(bc1+1,BOFF));

	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=0, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=1, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=2, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=3, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=4, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=5, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=6, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1<BOFF do {x1'=0, slot1'=7, bc1'=bc1+1} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=0} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=1} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=2} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=3} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=4} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=5} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=6} goto s1_4;
	when bc1=3 & bc1=BOFF do {x1'=0, slot1'=7} goto s1_4;

	-- backoff counter 4
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=4 ->
--		   1/16 : (s1'=4) & (x1'=0) & (slot1'=0 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=1 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=2 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=3 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=4 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=5 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=6 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=7 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=8 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=9 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=10) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=11) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=12) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=13) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=14) & (bc1'=min(bc1+1,BOFF))
--		+ 1/16 : (s1'=4) & (x1'=0) & (slot1'=15) & (bc1'=min(bc1+1,BOFF));


	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=0, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=1, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=2, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=3, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=4, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=5, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=6, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=7, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=8, bc1'=bc1+1} goto s1_4;	
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=9, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=10, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=11, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=12, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=13, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=14, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1<BOFF do {x1'=0, slot1'=15, bc1'=bc1+1} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=0} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=1} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=2} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=3} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=4} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=5} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=6} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=7} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=8} goto s1_4;	
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=9} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=10} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=11} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=12} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=13} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=14} goto s1_4;
	when bc1=4 & bc1=BOFF do {x1'=0, slot1'=15} goto s1_4;


	-- backoff counter 5
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=5 ->
--		   1/32 : (s1'=4) & (x1'=0) & (slot1'=0 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=1 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=2 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=3 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=4 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=5 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=6 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=7 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=8 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=9 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=10) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=11) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=12) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=13) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=14) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=15) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=16) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=17) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=18) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=19) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=20) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=21) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=22) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=23) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=24) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=25) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=26) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=27) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=28) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=29) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=30) & (bc1'=min(bc1+1,BOFF))
--		+ 1/32 : (s1'=4) & (x1'=0) & (slot1'=31) & (bc1'=min(bc1+1,BOFF));

	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=0, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=1, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=2, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=3, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=4, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=5, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=6, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=7, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=8, bc1'=bc1+1} goto s1_4;	
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=9, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=10, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=11, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=12, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=13, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=14, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=15, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=16, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=17, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=18, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=19, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=20, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=21, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=22, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=23, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=24, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=25, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=26, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=27, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=28, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=29, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=30, bc1'=bc1+1} goto s1_4;
	when bc1=5 & bc1<BOFF do {x1'=0, slot1'=31, bc1'=bc1+1} goto s1_4;

	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=0} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=1} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=2} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=3} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=4} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=5} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=6} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=7} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=8} goto s1_4;	
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=9} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=10} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=11} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=12} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=13} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=14} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=15} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=16} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=17} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=18} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=19} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=20} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=21} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=22} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=23} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=24} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=25} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=26} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=27} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=28} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=29} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=30} goto s1_4;
	when bc1=5 & bc1=BOFF do {x1'=0, slot1'=31} goto s1_4;


	-- backoff counter 6
--	[] s1=3 & (x1=DIFS | x1=DIFS-1) & bc1=6 ->
--		   1/64 : (s1'=4) & (x1'=0) & (slot1'=0 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/64 : (s1'=4) & (x1'=0) & (slot1'=1 ) & (bc1'=min(bc1+1,BOFF))
--		+ 1/64 : (s1'=4) & (x1'=0) & (slot1'=2 ) & (bc1'=min(bc1+1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=3 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=4 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=5 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=6 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=7 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=8 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=9 ) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=10) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=11) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=12) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=13) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=14) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=15) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=16) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=17) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=18) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=19) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=20) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=21) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=22) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=23) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=24) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=25) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=26) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=27) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=28) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=29) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=30) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=31) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=32) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=33) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=34) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=35) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=36) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=37) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=38) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=39) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=40) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=41) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=42) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=43) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=44) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=45) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=46) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=47) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=48) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=49) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=50) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=51) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=52) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=53) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=54) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=55) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=56) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=57) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=58) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=59) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=60) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=61) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=62) & (bc1'=min(bc1-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x1'=0) & (slot1'=63) & (bc1'=min(bc1-- +1,BOFF));



	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=0, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=1, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=2, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=3, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=4, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=5, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=6, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=7, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=8, bc1'=bc1+1} goto s1_4;	
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=9, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=10, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=11, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=12, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=13, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=14, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=15, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=16, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=17, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=18, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=19, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=20, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=21, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=22, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=23, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=24, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=25, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=26, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=27, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=28, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=29, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=30, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=31, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=32, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=33, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=34, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=35, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=36, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=37, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=38, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=39, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=40, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=41, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=42, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=43, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=44, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=45, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=46, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=47, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=48, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=49, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=50, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=51, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=52, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=53, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=54, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=55, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=56, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=57, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=58, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=59, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=60, bc1'=bc1+1} goto s1_4;
	when bc1=6 & bc1<BOFF do {x1'=0, slot1'=61, bc1'=bc1+1} goto s1_4;


	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=0} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=1} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=2} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=3} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=4} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=5} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=6} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=7} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=8} goto s1_4;	
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=9} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=10} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=11} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=12} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=13} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=14} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=15} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=16} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=17} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=18} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=19} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=20} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=21} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=22} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=23} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=24} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=25} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=26} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=27} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=28} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=29} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=30} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=31} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=32} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=33} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=34} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=35} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=36} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=37} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=38} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=39} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=40} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=41} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=42} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=43} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=44} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=45} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=46} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=47} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=48} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=49} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=50} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=51} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=52} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=53} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=54} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=55} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=56} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=57} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=58} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=59} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=60} goto s1_4;
	when bc1=6 & bc1=BOFF do {x1'=0, slot1'=61} goto s1_4;



	-- SET BACKOFF (no time can pass)
	-- chosen slot now set backoff

 loc s1_4: while x1 <= 0 wait {}

--	[] s1=4 -> 1/16 : (s1'=6) & (backoff2'=0)
--		    + 1/16 : (s1'=5) & (backoff2'=1)
--		    + 1/16 : (s1'=5) & (backoff2'=2)
--		    + 1/16 : (s1'=5) & (backoff2'=3)
--		    + 1/16 : (s1'=5) & (backoff2'=4)
--		    + 1/16 : (s1'=5) & (backoff2'=5)
--		    + 1/16 : (s1'=5) & (backoff2'=6)
--		    + 1/16 : (s1'=5) & (backoff2'=7)
--		    + 1/16 : (s1'=5) & (backoff2'=8)
--		    + 1/16 : (s1'=5) & (backoff2'=9)
--		    + 1/16 : (s1'=5) & (backoff2'=10)
--		    + 1/16 : (s1'=5) & (backoff2'=11)
--		    + 1/16 : (s1'=5) & (backoff2'=12)
--		    + 1/16 : (s1'=5) & (backoff2'=13)
--		    + 1/16 : (s1'=5) & (backoff2'=14)
--		    + 1/16 : (s1'=5) & (backoff2'=15);

when True	do {backoff2'=0} goto s1_6;
when True		do {backoff2'=1} goto s1_5;
when True		do {backoff2'=2} goto s1_5;	
when True		do {backoff2'=3} goto s1_5;
when True		do {backoff2'=4} goto s1_5;
when True		do {backoff2'=5} goto s1_5;
when True		do {backoff2'=6} goto s1_5;
when True		do {backoff2'=7} goto s1_5;
when True		do {backoff2'=8} goto s1_5;
when True		do {backoff2'=9} goto s1_5;
when True		do {backoff2'=10} goto s1_5;
when True		do {backoff2'=11} goto s1_5;
when True		do {backoff2'=12} goto s1_5;
when True		do {backoff2'=13} goto s1_5;
when True		do {backoff2'=14} goto s1_5;
when True		do {backoff2'=15} goto s1_5;



	-- BACKOFF
	-- let time pass
--	[time] s1=5 & x1<ASLOTTIME & free -> (x1'=min(x1+1,TIME_MAX));

loc s1_5: while x1<=ASLOTTIME wait {}
	

	-- decrement backoff
--	[] s1=5 & x1=ASLOTTIME & backoff2>0 -> (s1'=5) & (x1'=0) & (backoff2'=backoff2-1);	
--	[] s1=5 & x1=ASLOTTIME & backoff2=0 & slot1>0 ->
--			(s1'=5) & (x1'=0) & (backoff2'=15) & (slot1'=slot1-1);		-- finish backoff 
--	[] s1=5 & x1=ASLOTTIME & backoff2=0 & slot1=0 -> (s1'=8) & (x1'=0);


	when x1=ASLOTTIME & backoff2>0 
		do {x1'=0, backoff2'=backoff2-1} goto s1_5;
	when x1=ASLOTTIME & backoff2=0 & slot1>0
		do {x1'=0, backoff2'=15, slot1'=slot1-1} goto s1_5;
	when x1=ASLOTTIME & slot1=0
		do {x1'=0} goto s1_8;
	
	
	-- found channel busy
--	[] s1=5 & busy -> (s1'=6) & (x1'=0);

	when c1>0 do {x1'=0} goto s1_6;
	when c2>0 do {x1'=0} goto s1_6;


loc s1_6: while True wait {}

	-- WAIT UNTIL FREE IN BACKOFF
	-- let time pass (no need for the clock x1 to change)
--	[time] s1=6 & busy -> (s1'=6);

--	when c1>0 do {x1'=0} goto s1_6;
--	when c2>0 do {x1'=0} goto s1_6;


	-- find that channel is free
--	[] s1=6 & free -> (s1'=7);



	when c1=0 & c2=0 do {} goto s1_7;

	
	-- WAIT FOR DIFS THEN RESUME BACKOFF
	-- let time pass
--	[time] s1=7 & x1<DIFS & free -> (x1'=min(x1+1,TIME_MAX));


loc s1_7: while x1 <= DIFS wait {}


	-- resume backoff (start again from previous backoff)
--	[] s1=7 & (x1=DIFS | x1=DIFS-1) -> (s1'=5) & (x1'=0);

	when x1=DIFS do {x1'=0} goto s1_5;

	-- found channel busy
--	[] s1=7 & busy -> (s1'=6) & (x1'=0);

	when c1>0 do {x1'=0} goto s1_6;
	when c2>0 do {x1'=0} goto s1_6;
	
	-- VULNERABLE
	-- let time pass
--	[time] s1=8 & x1<VULN -> (x1'=min(x1+1,TIME_MAX));

loc s1_8: while x1 <= VULN wait {}

	-- move to transmit
--	[send1] s1=8 & (x1=VULN | x1=VULN-1) -> (s1'=9) & (x1'=0);

	when x1=VULN do {x1'=0} goto s1_9;

	-- TRANSMIT
	-- let time pass
--	[time] s1=9 & x1<TRANS_TIME_MAX -> (x1'=min(x1+1,TIME_MAX));

loc s1_9: while x1<= TRANS_TIME_MAX wait {}

	-- finish transmission successful	
--	[finish1] s1=9 & x1>=TRANS_TIME_MIN & c1=1 -> (s1'=10) & (x1'=0);
	-- finish transmission garbled
--	[finish1] s1=9 & x1>=TRANS_TIME_MIN & c1=2 -> (s1'=11) & (x1'=0);

	when x1 >= TRANS_TIME_MIN & c1=1 sync finish1 do {x1'=0} goto s1_10;
	when x1 >= TRANS_TIME_MIN & c1=2 sync finish1 do {x1'=0} goto s1_11;


	-- WAIT FOR SIFS THEN WAIT FOR ACK

loc s1_10: while x1 <= 0 wait {}
	-- WAIT FOR SIFS i.e. c1=0
	-- check channel and busy: go into backoff
--	[] s1=10 & c1=0 & x1=0 & busy -> (s1'=2);

	when x1=0 & c1=0 & c2>0 do {} goto s1_2;
	when x1=0 & c1=0 & c2=0 do {} goto s1_10bis;

	-- chack channel and free: let time pass
--	[time] s1=10 & c1=0 & x1=0 & free -> (x1'=min(x1+1,TIME_MAX));
	-- let time pass
--	[time] s1=10 & c1=0 & x1>0 & x1<SIFS -> (x1'=min(x1+1,TIME_MAX));
	-- ack is sent after SIFS (since SIFS-1=0 add condition that channel is free)
--	[send1] s1=10 & c1=0 & (x1=SIFS | (x1=SIFS-1 & free)) -> (s1'=10) & (x1'=0);
	
	when x1=SIFS & c1=0 & c2=0 sync send1 do {x1'=0} goto s1_10bis;


loc s1_10bis: while x1<= SIFS  wait {}
		when x1=SIFS & c1=0 do {x1'=0} goto s1_10ter;

loc s1_10ter: while x1 <= ACK wait {}

	-- WAIT FOR ACK i.e. c1=1
	-- let time pass
--	[time] s1=10 & c1=1 & x1<ACK -> (x1'=min(x1+1,TIME_MAX));



	-- get acknowledgement so packet sent correctly and move to done
--	[finish1] s1=10 & c1=1 & (x1=ACK | x1=ACK-1) -> (s1'=12) & (x1'=0) & (bc1'=0);

	when x1=ACK & c1=1 do {x1'=0, bc1'=0} goto s1_12;
	

loc s1_11: while x1 <= ACK_TO wait {}

	-- WAIT FOR ACK_TO
	-- check channel and busy: go into backoff
--	[] s1=11 & x1=0 & busy -> (s1'=2);

	when x1=0 & c1>0 do {} goto s1_2;
	when x1=0 & c2>0 do {} goto s1_2;
	when x1=0 & c1=0 & c2=0 do {} goto s1_11bis;

loc s1_11bis: while x1 <= ACK_TO wait {}

	-- check channel and free: let time pass
--	[time] s1=11 & x1=0 & free -> (x1'=min(x1+1,TIME_MAX));
	-- let time pass
--	[time] s1=11 & x1>0 & x1<ACK_TO -> (x1'=min(x1+1,TIME_MAX));
	-- no acknowledgement (go to backoff waiting DIFS first)
--	[] s1=11 & x1=ACK_TO -> (s1'=3) & (x1'=0);
		
	when x1=ACK_TO do {x1'=0} goto s1_3; 

loc s1_12: while True wait {}
		when True do {} goto s1_12;
	-- DONE
--	[time] s1=12 -> (s1'=12);
	
end		-- STATION 1








--****************************************************--
automaton station2
--****************************************************--
synclabs: send2, finish2;

initially s2_1;





loc s2_1: while x2 <= DIFS wait {}

	-- let time pass
--	[time] s1=1 & x2<DIFS & free -> (x2'=min(x2+1,TIME_MAX));
	-- ready to transmit
--	[] s1=1 & (x2=DIFS | x2=DIFS-1) -> (s1'=8) & (x2'=0);
	when x2=DIFS do {x2'=0} goto s2_8;

	-- found channel busy so wait until free
--	[] s1=1 & busy -> (s1'=2) & (x2'=0);

	when c1>0 do {x2'=0} goto s2_2;
	when c2>0 do {x2'=0} goto s2_2;

loc s2_2: while x2 >=0 wait {}
	-- WAIT UNTIL FREE BEFORE SETTING BACKOFF
	-- let time pass (no need for the clock x2 to change)
--	[time] s1=2 & busy -> (s1'=2);
--	when True c1>0  goto s2_2;
--	when True c2>0  goto s2_2;

	-- find that channel is free so check its free for DIFS before setting backoff
--	[] s1=2 & free -> (s1'=3);
	when c1=0 & c2=0 goto s2_3;


loc s2_3: while x2 <= DIFS wait {}

	-- WAIT FOR DIFS THEN SET BACKOFF
	-- let time pass
--	[time] s1=3 & x2<DIFS & free -> (x2'=min(x2+1,TIME_MAX));
	-- found channel busy so wait until free
--	[] s1=3 & busy -> (s1'=2) & (x2'=0);
	when c1>0 do {x2'=0} goto s2_2;
	when c2>0 do {x2'=0} goto s2_2;

	-- start backoff  first uniformly choose slot
	-- backoff counter 0
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=0 ->
--		   (s1'=4) & (x2'=0) & (slot2'=0) & (bc2'=min(bc2+1,BOFF));
	when x2=DIFS & bc2< BOFF & bc2=0 
			do {x2'=0,slot2'=0, bc2'=bc2+1} goto s2_4;
	when x2=DIFS & bc2=BOFF & bc2=0 
			do {x2'=0,slot2'=0} goto s2_4;

	-- backoff counter 1
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=1 ->
--		   1/2 : (s1'=4) & (x2'=0) & (slot2'=0) & (bc2'=min(bc2+1,BOFF))
--		+ 1/2 : (s1'=4) & (x2'=0) & (slot2'=1) & (bc2'=min(bc2+1,BOFF));
	when bc2=1 & bc2<BOFF do {x2'=0, slot2'=0, bc2'=bc2+1} goto s2_4;
	when bc2=1 & bc2=BOFF do {x2'=0, slot2'=0} goto s2_4;


	-- backoff counter 2
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=2 ->
--		   1/4 : (s1'=4) & (x2'=0) & (slot2'=0) & (bc2'=min(bc2+1,BOFF))
--		+ 1/4 : (s1'=4) & (x2'=0) & (slot2'=1) & (bc2'=min(bc2+1,BOFF))
--		+ 1/4 : (s1'=4) & (x2'=0) & (slot2'=2) & (bc2'=min(bc2+1,BOFF))
--		+ 1/4 : (s1'=4) & (x2'=0) & (slot2'=3) & (bc2'=min(bc2+1,BOFF));

	when bc2=2 & bc2<BOFF do {x2'=0, slot2'=0, bc2'=bc2+1} goto s2_4;
	when bc2=2 & bc2<BOFF do {x2'=0, slot2'=1, bc2'=bc2+1} goto s2_4;
	when bc2=2 & bc2<BOFF do {x2'=0, slot2'=2, bc2'=bc2+1} goto s2_4;
	when bc2=2 & bc2<BOFF do {x2'=0, slot2'=3, bc2'=bc2+1} goto s2_4;
	when bc2=2 & bc2=BOFF do {x2'=0, slot2'=0} goto s2_4;
	when bc2=2 & bc2=BOFF do {x2'=0, slot2'=1} goto s2_4;
	when bc2=2 & bc2=BOFF do {x2'=0, slot2'=2} goto s2_4;
	when bc2=2 & bc2=BOFF do {x2'=0, slot2'=3} goto s2_4;


	-- backoff counter 3
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=3 ->
--		   1/8 : (s1'=4) & (x2'=0) & (slot2'=0) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=1) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=2) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=3) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=4) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=5) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=6) & (bc2'=min(bc2+1,BOFF))
--		+ 1/8 : (s1'=4) & (x2'=0) & (slot2'=7) & (bc2'=min(bc2+1,BOFF));

	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=0, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=1, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=2, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=3, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=4, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=5, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=6, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2<BOFF do {x2'=0, slot2'=7, bc2'=bc2+1} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=0} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=1} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=2} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=3} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=4} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=5} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=6} goto s2_4;
	when bc2=3 & bc2=BOFF do {x2'=0, slot2'=7} goto s2_4;

	-- backoff counter 4
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=4 ->
--		   1/16 : (s1'=4) & (x2'=0) & (slot2'=0 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=1 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=2 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=3 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=4 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=5 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=6 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=7 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=8 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=9 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=10) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=11) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=12) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=13) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=14) & (bc2'=min(bc2+1,BOFF))
--		+ 1/16 : (s1'=4) & (x2'=0) & (slot2'=15) & (bc2'=min(bc2+1,BOFF));


	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=0, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=1, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=2, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=3, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=4, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=5, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=6, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=7, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=8, bc2'=bc2+1} goto s2_4;	
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=9, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=10, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=11, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=12, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=13, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=14, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2<BOFF do {x2'=0, slot2'=15, bc2'=bc2+1} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=0} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=1} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=2} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=3} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=4} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=5} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=6} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=7} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=8} goto s2_4;	
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=9} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=10} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=11} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=12} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=13} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=14} goto s2_4;
	when bc2=4 & bc2=BOFF do {x2'=0, slot2'=15} goto s2_4;


	-- backoff counter 5
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=5 ->
--		   1/32 : (s1'=4) & (x2'=0) & (slot2'=0 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=1 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=2 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=3 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=4 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=5 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=6 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=7 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=8 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=9 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=10) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=11) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=12) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=13) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=14) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=15) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=16) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=17) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=18) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=19) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=20) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=21) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=22) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=23) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=24) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=25) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=26) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=27) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=28) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=29) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=30) & (bc2'=min(bc2+1,BOFF))
--		+ 1/32 : (s1'=4) & (x2'=0) & (slot2'=31) & (bc2'=min(bc2+1,BOFF));

	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=0, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=1, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=2, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=3, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=4, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=5, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=6, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=7, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=8, bc2'=bc2+1} goto s2_4;	
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=9, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=10, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=11, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=12, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=13, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=14, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=15, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=16, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=17, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=18, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=19, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=20, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=21, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=22, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=23, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=24, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=25, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=26, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=27, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=28, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=29, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=30, bc2'=bc2+1} goto s2_4;
	when bc2=5 & bc2<BOFF do {x2'=0, slot2'=31, bc2'=bc2+1} goto s2_4;

	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=0} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=1} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=2} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=3} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=4} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=5} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=6} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=7} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=8} goto s2_4;	
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=9} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=10} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=11} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=12} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=13} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=14} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=15} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=16} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=17} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=18} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=19} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=20} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=21} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=22} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=23} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=24} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=25} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=26} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=27} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=28} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=29} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=30} goto s2_4;
	when bc2=5 & bc2=BOFF do {x2'=0, slot2'=31} goto s2_4;


	-- backoff counter 6
--	[] s1=3 & (x2=DIFS | x2=DIFS-1) & bc2=6 ->
--		   1/64 : (s1'=4) & (x2'=0) & (slot2'=0 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/64 : (s1'=4) & (x2'=0) & (slot2'=1 ) & (bc2'=min(bc2+1,BOFF))
--		+ 1/64 : (s1'=4) & (x2'=0) & (slot2'=2 ) & (bc2'=min(bc2+1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=3 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=4 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=5 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=6 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=7 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=8 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=9 ) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=10) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=11) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=12) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=13) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=14) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=15) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=16) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=17) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=18) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=19) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=20) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=21) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=22) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=23) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=24) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=25) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=26) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=27) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=28) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=29) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=30) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=31) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=32) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=33) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=34) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=35) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=36) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=37) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=38) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=39) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=40) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=41) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=42) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=43) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=44) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=45) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=46) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=47) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=48) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=49) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=50) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=51) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=52) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=53) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=54) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=55) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=56) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=57) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=58) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=59) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=60) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=61) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=62) & (bc2'=min(bc2-- +1,BOFF))
		-- + 1/64 : (s1'=4) & (x2'=0) & (slot2'=63) & (bc2'=min(bc2-- +1,BOFF));



	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=0, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=1, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=2, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=3, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=4, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=5, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=6, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=7, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=8, bc2'=bc2+1} goto s2_4;	
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=9, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=10, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=11, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=12, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=13, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=14, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=15, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=16, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=17, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=18, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=19, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=20, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=21, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=22, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=23, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=24, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=25, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=26, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=27, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=28, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=29, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=30, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=31, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=32, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=33, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=34, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=35, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=36, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=37, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=38, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=39, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=40, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=41, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=42, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=43, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=44, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=45, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=46, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=47, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=48, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=49, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=50, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=51, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=52, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=53, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=54, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=55, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=56, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=57, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=58, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=59, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=60, bc2'=bc2+1} goto s2_4;
	when bc2=6 & bc2<BOFF do {x2'=0, slot2'=61, bc2'=bc2+1} goto s2_4;


	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=0} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=1} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=2} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=3} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=4} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=5} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=6} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=7} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=8} goto s2_4;	
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=9} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=10} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=11} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=12} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=13} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=14} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=15} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=16} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=17} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=18} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=19} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=20} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=21} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=22} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=23} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=24} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=25} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=26} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=27} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=28} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=29} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=30} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=31} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=32} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=33} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=34} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=35} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=36} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=37} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=38} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=39} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=40} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=41} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=42} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=43} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=44} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=45} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=46} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=47} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=48} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=49} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=50} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=51} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=52} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=53} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=54} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=55} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=56} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=57} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=58} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=59} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=60} goto s2_4;
	when bc2=6 & bc2=BOFF do {x2'=0, slot2'=61} goto s2_4;



	-- SET BACKOFF (no time can pass)
	-- chosen slot now set backoff

 loc s2_4: while x2 <= 0 wait {}

--	[] s1=4 -> 1/16 : (s1'=6) & (backoff2'=0)
--		    + 1/16 : (s1'=5) & (backoff2'=1)
--		    + 1/16 : (s1'=5) & (backoff2'=2)
--		    + 1/16 : (s1'=5) & (backoff2'=3)
--		    + 1/16 : (s1'=5) & (backoff2'=4)
--		    + 1/16 : (s1'=5) & (backoff2'=5)
--		    + 1/16 : (s1'=5) & (backoff2'=6)
--		    + 1/16 : (s1'=5) & (backoff2'=7)
--		    + 1/16 : (s1'=5) & (backoff2'=8)
--		    + 1/16 : (s1'=5) & (backoff2'=9)
--		    + 1/16 : (s1'=5) & (backoff2'=10)
--		    + 1/16 : (s1'=5) & (backoff2'=11)
--		    + 1/16 : (s1'=5) & (backoff2'=12)
--		    + 1/16 : (s1'=5) & (backoff2'=13)
--		    + 1/16 : (s1'=5) & (backoff2'=14)
--		    + 1/16 : (s1'=5) & (backoff2'=15);

when True	do {backoff2'=0} goto s2_6;
when True	do {backoff2'=1} goto s2_5;
when True	do {backoff2'=2} goto s2_5;	
when True	do {backoff2'=3} goto s2_5;
when True	do {backoff2'=4} goto s2_5;
when True	do {backoff2'=5} goto s2_5;
when True	do {backoff2'=6} goto s2_5;
when True	do {backoff2'=7} goto s2_5;
when True	do {backoff2'=8} goto s2_5;
when True	do {backoff2'=9} goto s2_5;
when True	do {backoff2'=10} goto s2_5;
when True	do {backoff2'=11} goto s2_5;
when True	do {backoff2'=12} goto s2_5;
when True	do {backoff2'=13} goto s2_5;
when True	do {backoff2'=14} goto s2_5;
when True	do {backoff2'=15} goto s2_5;



	-- BACKOFF
	-- let time pass
--	[time] s1=5 & x2<ASLOTTIME & free -> (x2'=min(x2+1,TIME_MAX));

loc s2_5: while x2<=ASLOTTIME wait {}
	

	-- decrement backoff
--	[] s1=5 & x2=ASLOTTIME & backoff2>0 -> (s1'=5) & (x2'=0) & (backoff2'=backoff2-1);	
--	[] s1=5 & x2=ASLOTTIME & backoff2=0 & slot2>0 ->
--			(s1'=5) & (x2'=0) & (backoff2'=15) & (slot2'=slot2-1);		-- finish backoff 
--	[] s1=5 & x2=ASLOTTIME & backoff2=0 & slot2=0 -> (s1'=8) & (x2'=0);


	when x2=ASLOTTIME & backoff2>0 
		do {x2'=0, backoff2'=backoff2-1} goto s2_5;
	when x2=ASLOTTIME & backoff2=0 & slot2>0
		do {x2'=0, backoff2'=15, slot2'=slot2-1} goto s2_5;
	when x2=ASLOTTIME & slot2=0
		do {x2'=0} goto s2_8;
	
	
	-- found channel busy
--	[] s1=5 & busy -> (s1'=6) & (x2'=0);

	when c1>0 do {x2'=0} goto s2_6;
	when c2>0 do {x2'=0} goto s2_6;


loc s2_6: while True wait {}

	-- WAIT UNTIL FREE IN BACKOFF
	-- let time pass (no need for the clock x2 to change)
--	[time] s1=6 & busy -> (s1'=6);

--	when c1>0 do {x2'=0} goto s2_6;
--	when c2>0 do {x2'=0} goto s2_6;


	-- find that channel is free
--	[] s1=6 & free -> (s1'=7);

	when c1=0 & c2=0 do {} goto s2_7;

	
	-- WAIT FOR DIFS THEN RESUME BACKOFF
	-- let time pass
--	[time] s1=7 & x2<DIFS & free -> (x2'=min(x2+1,TIME_MAX));


loc s2_7: while x2 <= DIFS wait {}


	-- resume backoff (start again from previous backoff)
--	[] s1=7 & (x2=DIFS | x2=DIFS-1) -> (s1'=5) & (x2'=0);

	when x2=DIFS do {x2'=0} goto s2_5;

	-- found channel busy
--	[] s1=7 & busy -> (s1'=6) & (x2'=0);

	when c1>0 do {x2'=0} goto s2_6;
	when c2>0 do {x2'=0} goto s2_6;
	
	-- VULNERABLE
	-- let time pass
--	[time] s1=8 & x2<VULN -> (x2'=min(x2+1,TIME_MAX));

loc s2_8: while x2 <= VULN wait {}

	-- move to transmit
--	[send2] s1=8 & (x2=VULN | x2=VULN-1) -> (s1'=9) & (x2'=0);

	when x2=VULN do {x2'=0} goto s2_9;

	-- TRANSMIT
	-- let time pass
--	[time] s1=9 & x2<TRANS_TIME_MAX -> (x2'=min(x2+1,TIME_MAX));

loc s2_9: while x2<= TRANS_TIME_MAX wait {}

	-- finish transmission successful	
--	[finish2] s1=9 & x2>=TRANS_TIME_MIN & c1=1 -> (s1'=10) & (x2'=0);
	-- finish transmission garbled
--	[finish2] s1=9 & x2>=TRANS_TIME_MIN & c1=2 -> (s1'=11) & (x2'=0);

	when x2 >= TRANS_TIME_MIN & c2=1 sync finish2 do {x2'=0} goto s2_10;
	when x2 >= TRANS_TIME_MIN & c2=2 sync finish2 do {x2'=0} goto s2_11;


	-- WAIT FOR SIFS THEN WAIT FOR ACK

loc s2_10: while x2 <= 0 wait {}
	-- WAIT FOR SIFS i.e. c1=0
	-- check channel and busy: go into backoff
--	[] s1=10 & c1=0 & x2=0 & busy -> (s1'=2);

	when x2=0 & c2=0 & c1>0 do {} goto s2_2;
	when x2=0 & c2=0 & c1=0 do {} goto s2_10bis;

	-- chack channel and free: let time pass
--	[time] s1=10 & c1=0 & x2=0 & free -> (x2'=min(x2+1,TIME_MAX));
	-- let time pass
--	[time] s1=10 & c1=0 & x2>0 & x2<SIFS -> (x2'=min(x2+1,TIME_MAX));
	-- ack is sent after SIFS (since SIFS-1=0 add condition that channel is free)
--	[send2] s1=10 & c1=0 & (x2=SIFS | (x2=SIFS-1 & free)) -> (s1'=10) & (x2'=0);
	
	when x2=SIFS & c1=0 & c2=0 sync send2 do {x2'=0} goto s2_10bis;


loc s2_10bis: while x2<= SIFS  wait {}
		when x2=SIFS & c2=0 do {x2'=0} goto s2_10ter;

loc s2_10ter: while x2 <= ACK wait {}

	-- WAIT FOR ACK i.e. c1=1
	-- let time pass
--	[time] s1=10 & c1=1 & x2<ACK -> (x2'=min(x2+1,TIME_MAX));



	-- get acknowledgement so packet sent correctly and move to done
--	[finish2] s1=10 & c1=1 & (x2=ACK | x2=ACK-1) -> (s1'=12) & (x2'=0) & (bc2'=0);

	when x2=ACK & c2=1 do {x2'=0, bc2'=0} goto s2_12;
	

loc s2_11: while x2 <= ACK_TO wait {}

	-- WAIT FOR ACK_TO
	-- check channel and busy: go into backoff
--	[] s1=11 & x2=0 & busy -> (s1'=2);

	when x2=0 & c1>0 do {} goto s2_2;
	when x2=0 & c2>0 do {} goto s2_2;
	when x2=0 & c1=0 & c2=0 do {} goto s2_11bis;

loc s2_11bis: while x2 <= ACK_TO wait {}

	-- check channel and free: let time pass
--	[time] s1=11 & x2=0 & free -> (x2'=min(x2+1,TIME_MAX));
	-- let time pass
--	[time] s1=11 & x2>0 & x2<ACK_TO -> (x2'=min(x2+1,TIME_MAX));
	-- no acknowledgement (go to backoff waiting DIFS first)
--	[] s1=11 & x2=ACK_TO -> (s1'=3) & (x2'=0);
		
	when x2=ACK_TO do {x2'=0} goto s2_3; 

loc s2_12: while True wait {}
	when True		do {} goto s2_12;
	-- DONE
--	[time] s1=12 -> (s1'=12);
	
end		-- STATION 2





--****************************************************--
--****************************************************--
-- ANALYSIS
--****************************************************--
--****************************************************--

var init : region;

init := True

-- LOCATIONS
	& loc[medium]   = Idle 
	& loc[station1] = s1_1 
	& loc[station2] = s2_1

-- THE MEDIUM/CHANNEL

	& c1 = 2 
	& c2 = 2

	& col = 0 -- 1??? -- : [0..8]; -- number of collisions
			-- medium status 

	& slot1    = 0 
	& slot2    = 0  -- : [0..63]; 
	& backoff1 = 0 
	& backoff2 = 0  --: [0..15];

	& bc1 = 0 
	& bc2 = 0 -- : [0..BOFF];

	----------------------
	-- Clocks
	----------------------
	& x1 = 0 
	& x2 = 0 

	----------------------
	-- Constraints
	----------------------
	& TRANS_TIME_MIN <= TRANS_TIME_MAX
(* 	& BOFF           = 6 *)

	---START PI0---
--	& ASLOTTIME      = 1
--	& DIFS           = 3 
--	& VULN           = 1 
--	& TRANS_TIME_MAX = 315
--	& TRANS_TIME_MIN = 4 
--	& ACK_TO         = 6
--	& ACK            = 4 
--	& SIFS           = 1
--	& BOFF           = 6 
	---END PI0---

       -- STANDARD VALUES

--	& ASLOTTIME      = 50
--	& DIFS           = 128
--	& VULN           = 48
--	& TRANS_TIME_MAX = 15717
--	& TRANS_TIME_MIN = 224
--	& ACK_TO         = 300
--	& ACK            = 205
--	& SIFS           = 28
--	& BOFF           = 6 

        -- RESCALED VALUES FROM THE PRISM COMMUNITY

--	& ASLOTTIME      = 1
--	& DIFS           = 3 
--	& VULN           = 1 
--	& TRANS_TIME_MAX = 315
--	& TRANS_TIME_MIN = 4 
--	& ACK_TO         = 6
--	& ACK            = 4 
--	& SIFS           = 1
--	& BOFF           = 6 

        -- Parameters greater than 0
	& ASLOTTIME      >= 0
	& DIFS           >= 0
	& VULN           >= 0 
	& TRANS_TIME_MAX >= 0
	& TRANS_TIME_MIN >= 0 
	& ACK_TO         >= 0
	& ACK            >= 0
	& SIFS           >= 0
	& BOFF           >= 0


	---START---
	---END---

;

